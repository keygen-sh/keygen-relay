// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: audit_logs.sql

package db

import (
	"context"
)

const getAuditLogs = `-- name: GetAuditLogs :many
SELECT id, event_type_id, entity_type_id, entity_id, created_at
FROM audit_logs
ORDER BY created_at DESC
LIMIT ?
`

func (q *Queries) GetAuditLogs(ctx context.Context, limit int64) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.EventTypeID,
			&i.EntityTypeID,
			&i.EntityID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByEntity = `-- name: GetAuditLogsByEntity :many
SELECT id, event_type_id, entity_type_id, entity_id, created_at
FROM audit_logs
WHERE entity_type_id = ? AND entity_id = ?
ORDER BY created_at DESC
`

type GetAuditLogsByEntityParams struct {
	EntityTypeID int64
	EntityID     string
}

func (q *Queries) GetAuditLogsByEntity(ctx context.Context, arg GetAuditLogsByEntityParams) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByEntity, arg.EntityTypeID, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.EventTypeID,
			&i.EntityTypeID,
			&i.EntityID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAuditLog = `-- name: InsertAuditLog :exec
INSERT INTO audit_logs (event_type_id, entity_type_id, entity_id)
VALUES (?, ?, ?)
`

type InsertAuditLogParams struct {
	EventTypeID  int64
	EntityTypeID int64
	EntityID     string
}

func (q *Queries) InsertAuditLog(ctx context.Context, arg InsertAuditLogParams) error {
	_, err := q.db.ExecContext(ctx, insertAuditLog, arg.EventTypeID, arg.EntityTypeID, arg.EntityID)
	return err
}
