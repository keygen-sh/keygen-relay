// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: nodes.sql

package db

import (
	"context"
)

const deleteInactiveNodes = `-- name: DeleteInactiveNodes :many
DELETE FROM nodes
WHERE last_heartbeat_at <= strftime('%s', 'now', ?)
RETURNING id, fingerprint, last_heartbeat_at, created_at
`

func (q *Queries) DeleteInactiveNodes(ctx context.Context, strftime interface{}) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, deleteInactiveNodes, strftime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Fingerprint,
			&i.LastHeartbeatAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteNodeByFingerprint = `-- name: DeleteNodeByFingerprint :exec
DELETE FROM nodes WHERE fingerprint = ?
`

func (q *Queries) DeleteNodeByFingerprint(ctx context.Context, fingerprint string) error {
	_, err := q.db.ExecContext(ctx, deleteNodeByFingerprint, fingerprint)
	return err
}

const getNodeByFingerprint = `-- name: GetNodeByFingerprint :one
SELECT id, fingerprint, last_heartbeat_at, created_at
FROM nodes
WHERE fingerprint = ?
`

func (q *Queries) GetNodeByFingerprint(ctx context.Context, fingerprint string) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeByFingerprint, fingerprint)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Fingerprint,
		&i.LastHeartbeatAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertNode = `-- name: InsertNode :one
INSERT INTO nodes (fingerprint, last_heartbeat_at, created_at)
VALUES (?, NULL, unixepoch())
RETURNING id, fingerprint, last_heartbeat_at, created_at
`

func (q *Queries) InsertNode(ctx context.Context, fingerprint string) (Node, error) {
	row := q.db.QueryRowContext(ctx, insertNode, fingerprint)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Fingerprint,
		&i.LastHeartbeatAt,
		&i.CreatedAt,
	)
	return i, err
}

const pingNodeHeartbeatByFingerprint = `-- name: PingNodeHeartbeatByFingerprint :exec
UPDATE nodes
SET last_heartbeat_at = unixepoch()
WHERE fingerprint = ?
`

func (q *Queries) PingNodeHeartbeatByFingerprint(ctx context.Context, fingerprint string) error {
	_, err := q.db.ExecContext(ctx, pingNodeHeartbeatByFingerprint, fingerprint)
	return err
}
