// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: nodes.sql

package db

import (
	"context"
)

const deleteInactiveNodes = `-- name: DeleteInactiveNodes :exec
DELETE FROM nodes
WHERE last_heartbeat_at <= datetime('now', ?)
`

func (q *Queries) DeleteInactiveNodes(ctx context.Context, datetime interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteInactiveNodes, datetime)
	return err
}

const deleteNodeByFingerprint = `-- name: DeleteNodeByFingerprint :exec
DELETE FROM nodes WHERE fingerprint = ?
`

func (q *Queries) DeleteNodeByFingerprint(ctx context.Context, fingerprint string) error {
	_, err := q.db.ExecContext(ctx, deleteNodeByFingerprint, fingerprint)
	return err
}

const getNodeByFingerprint = `-- name: GetNodeByFingerprint :one
SELECT id, fingerprint, claimed_at, last_heartbeat_at, created_at
FROM nodes
WHERE fingerprint = ?
`

func (q *Queries) GetNodeByFingerprint(ctx context.Context, fingerprint string) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeByFingerprint, fingerprint)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Fingerprint,
		&i.ClaimedAt,
		&i.LastHeartbeatAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertNode = `-- name: InsertNode :one
INSERT INTO nodes (fingerprint, claimed_at, last_heartbeat_at, created_at)
VALUES (?, NULL, NULL, CURRENT_TIMESTAMP)
RETURNING id, fingerprint, claimed_at, last_heartbeat_at, created_at
`

func (q *Queries) InsertNode(ctx context.Context, fingerprint string) (Node, error) {
	row := q.db.QueryRowContext(ctx, insertNode, fingerprint)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Fingerprint,
		&i.ClaimedAt,
		&i.LastHeartbeatAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateNodeHeartbeatAndClaimedAtByFingerprint = `-- name: UpdateNodeHeartbeatAndClaimedAtByFingerprint :exec
UPDATE nodes
SET last_heartbeat_at = CURRENT_TIMESTAMP, claimed_at = CURRENT_TIMESTAMP
WHERE fingerprint = ?
`

func (q *Queries) UpdateNodeHeartbeatAndClaimedAtByFingerprint(ctx context.Context, fingerprint string) error {
	_, err := q.db.ExecContext(ctx, updateNodeHeartbeatAndClaimedAtByFingerprint, fingerprint)
	return err
}

const updateNodeHeartbeatByFingerprint = `-- name: UpdateNodeHeartbeatByFingerprint :exec
UPDATE nodes
SET last_heartbeat_at = CURRENT_TIMESTAMP
WHERE fingerprint = ?
`

func (q *Queries) UpdateNodeHeartbeatByFingerprint(ctx context.Context, fingerprint string) error {
	_, err := q.db.ExecContext(ctx, updateNodeHeartbeatByFingerprint, fingerprint)
	return err
}
