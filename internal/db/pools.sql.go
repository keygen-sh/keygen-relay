// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pools.sql

package db

import (
	"context"
)

const createPool = `-- name: CreatePool :one
INSERT INTO pools (name)
VALUES (?)
RETURNING id, name, created_at
`

func (q *Queries) CreatePool(ctx context.Context, name string) (Pool, error) {
	row := q.db.QueryRowContext(ctx, createPool, name)
	var i Pool
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deletePoolByID = `-- name: DeletePoolByID :one
DELETE FROM pools
WHERE id = ?
RETURNING id, name, created_at
`

func (q *Queries) DeletePoolByID(ctx context.Context, id int64) (Pool, error) {
	row := q.db.QueryRowContext(ctx, deletePoolByID, id)
	var i Pool
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getPoolByID = `-- name: GetPoolByID :one
SELECT id, name, created_at
FROM pools
WHERE id = ?
`

func (q *Queries) GetPoolByID(ctx context.Context, id int64) (Pool, error) {
	row := q.db.QueryRowContext(ctx, getPoolByID, id)
	var i Pool
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getPoolByName = `-- name: GetPoolByName :one
SELECT id, name, created_at
FROM pools
WHERE name = ?
`

func (q *Queries) GetPoolByName(ctx context.Context, name string) (Pool, error) {
	row := q.db.QueryRowContext(ctx, getPoolByName, name)
	var i Pool
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getPools = `-- name: GetPools :many
SELECT id, name, created_at
FROM pools
ORDER BY id
`

func (q *Queries) GetPools(ctx context.Context) ([]Pool, error) {
	rows, err := q.db.QueryContext(ctx, getPools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pool
	for rows.Next() {
		var i Pool
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
